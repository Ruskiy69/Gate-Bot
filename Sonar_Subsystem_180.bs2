' =========================================================================
'
'   File....... Sonar_Navigation.BS2
'   Purpose.... Use the sonar in combination with the servo
'               motors to find and navigate towards objects.
'   Author..... George Kudrayvtsev
'
'   {$STAMP BS2}
'   {$PBASIC 2.5}
'
' =========================================================================
' -----[ Program Description ]---------------------------------------------
'
' This program will use the Parallax PING))) sensor to determine the
' location of objects, and move towards them using the servos.
'
'
' -----[ I/O Definitions ]-------------------------------------------------
'SERVO_CONTROLLER        PIN     15
SONAR_SERVO             PIN     13
Sonar                   PIN     14
R_Servo                 PIN     12
L_Servo                 PIN     14
Horn                    PIN     0

' -----[ Constants ]-------------------------
' -----------------------------
' This #select code will determine the proper constants for conversion
' from micro-seconds to inches and centimeters
#SELECT $STAMP
  #CASE BS2, BS2E
    Trigger             CON     5                       ' trigger pulse = 10 uS
    Scale               CON     $200                    ' raw x 2.00 = uS
  #CASE BS2SX, BS2P, BS2PX
    Trigger             CON     13
    Scale               CON     $0CD                    ' raw x 0.80 = uS
  #CASE BS2PE
    Trigger             CON     5
    Scale               CON     $1E1                    ' raw x 1.88 = uS
#ENDSELECT

RawToIn                 CON     889                     ' 1 / 73.746 (with **)
RawToCm                 CON     2257                    ' 1 / 29.034 (with **)
IsHigh                  CON     1                       ' for PULSOUT
IsLow                   CON     0

BAUD                    CON     396

FAR_RIGHT               CON     380
FAR_LEFT                CON     1120
CENTER                  CON     750

' -----[ Variables ]-------------------------------------------------------
' Variables to monitor Sonar distance
raw_dist                VAR     Word                    ' raw measurement
centimeters             VAR     Word

' Variables to monitor array indices as well as a simple counter variable
i                       VAR     Byte
j                       VAR     Byte
k                       VAR     Byte
dir                     VAR     Bit                     ' Direction (1 = right, 0 = left)
go                      VAR     Bit

' Arrays to control distance and rotation counts for objects
Start_Rotation          VAR     Byte
End_Rotation            VAR     Byte
Object                  VAR     Byte
Distance                VAR     Byte

channel                 VAR     Nib
position                VAR     Word
start                   VAR     Bit

go        = 1
dir       = 0
channel   = 0
position  = CENTER

Main:
  DEBUG CLS
  GOSUB Center_Sonar_Servo
  PAUSE 1000

  GOSUB Go_Left_Sonar_Servo

  DO
    FOR i = 0 TO 20 STEP 1
      IF(dir) THEN
        GOSUB Go_Left_Sonar_Servo
      ELSE
        GOSUB Go_Right_Sonar_Servo
      ENDIF

      IF(go) THEN
        GOSUB Get_Sonar
        GOSUB To_Centimeters

        IF(centimeters < 36) THEN
          IF(start = 0) THEN
            'GOSUB Get_Servo_Position
            start = 1
            Start_Rotation = i
          ENDIF
        ELSE
          IF(start) THEN
            start = 0
            'GOSUB Get_Servo_Position
            End_Rotation = i
            go = 0
          ENDIF
        ENDIF
      ELSE
        PAUSE 20
      ENDIF

    NEXT

    DEBUG "Start: ", DEC Start_Rotation, CR
    DEBUG "End  : ", DEC End_Rotation, CR
    DEBUG "==========", CR

    dir = ~dir
    go = ~go

    ' Each rotation "i" is 9 degrees
    ' 21 calls to "Turn_Right" is 90 degrees
    ' So 1 call is 4.2 degrees
    ' So to get one iteration of the sonar servo
    ' (9 degrees), call "Turn_Right" twice (ish)

    IF((Start_Rotation <> 0 AND Start_Rotation <> 20) OR (End_Rotation <> 0 AND End_Rotation <> 20)) THEN
      IF(Start_Rotation < 10) THEN
        FOR j = 0 TO Start_Rotation
          GOSUB Turn_Left
          PAUSE 20
          GOSUB Turn_Left
          PAUSE 20
        NEXT
      ELSEIF(Start_Rotation > 10) THEN
        FOR j = 0 TO Start_Rotation
          GOSUB Turn_Right
          PAUSE 20
          GOSUB Turn_Right
          PAUSE 20
        NEXT
      ENDIF

      FOR j = 0 TO 20
        GOSUB Forward
        PAUSE 20
      NEXT
    ENDIF
  LOOP
  END

' -----[ Subroutines ]-----------------------------------------------------
' This subroutine triggers the PING))) sonar sensor and measures
' the echo pulse.  The raw value from the sensor is converted to
' microseconds based on the Stamp module in use.  This value is
' divided by two to remove the return trip -- the result value is
' the distance from the sensor to the target in microseconds.
Get_Sonar:
  Sonar = IsLow
  PULSOUT Sonar, Trigger                        ' activate sensor
  PULSIN  Sonar, IsHigh, raw_dist               ' measure echo pulse
  raw_dist = raw_dist */ Scale                  ' convert to uS
  raw_dist = raw_dist / 2                       ' remove return trip
  RETURN

To_Centimeters:
  centimeters = raw_dist ** RawToCm
  RETURN

' Move the bot forward
Forward:
  PULSOUT L_Servo, 830
  PULSOUT R_Servo, 660
  RETURN

' Move backwards
Backward:
  PULSOUT L_Servo, 670
  PULSOUT R_Servo, 840
  RETURN

' Turn left
Turn_Left:
  PULSOUT L_Servo, 730
  PULSOUT R_Servo, 650
  RETURN

' Turn right
Turn_Right:
  PULSOUT L_Servo, 850
  PULSOUT R_Servo, 770
  RETURN

Center_Sonar_Servo:
  ' I don't know why, but you need to
  ' do it twice for a more accurate
  ' center measurement.
  FOR position = 0 TO 7
    PULSOUT SONAR_SERVO, CENTER
    PAUSE 20
  NEXT

  FOR position = 0 TO 7
    PULSOUT SONAR_SERVO, CENTER
    PAUSE 20
  NEXT
  RETURN

Go_Left_Sonar_Servo:
  PULSOUT SONAR_SERVO, FAR_LEFT
  RETURN

Go_Left_Sonar_Servo_Full:
  FOR position = 0 TO 20
    PULSOUT SONAR_SERVO, FAR_LEFT
    PAUSE 20
  NEXT
  RETURN

Go_Right_Sonar_Servo:
  PULSOUT SONAR_SERVO, FAR_RIGHT
  RETURN

Go_Right_Sonar_Servo_Full:
  FOR position = 0 TO 20
    PULSOUT SONAR_SERVO, FAR_RIGHT
    PAUSE 20
  NEXT
  RETURN